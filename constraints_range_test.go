package semver

import "testing"

func TestConstraintsRanges(t *testing.T) {
	tests := []struct {
		constraint string
		version    string
	}{
		{"*", "1.2.3"},
		{"~0.0.0", "1.2.3"},
		{"0.x.x", "1.2.3"},
		{"0.0.x", "1.2.3"},
		{"0.0.0.x", "0.0.1"},
		{"0.0.0", "1.2.3"},
		{"*", "1.2.3"},
		{"^0.0.0", "1.2.3"},
		{"= 2.0", "1.2.3"},
		{"= 2.0", "2.0.0"},
		{"4.1", "4.1.0"},
		{"4.1.x", "4.1.3"},
		{"1.x", "1.4"},
		{"!=4.1", "4.1.0"},
		{"!=4.1", "5.1.0"},
		{"!=4.x", "5.1.0"},
		{"!=4.x", "4.1.0"},
		{"!=4.1.x", "4.2.0"},
		{"!=4.2.x", "4.2.3"},
		{">1.1", "4.1.0"},
		{">1.1", "1.1.0"},
		{"<1.1", "0.1.0"},
		{"<1.1", "1.1.0"},
		{"<1.1", "1.1.1"},
		{"<1.x", "1.1.1"},
		{"<1.x", "0.1.1"},
		{"<1.x", "2.0.0"},
		{"<1.1.x", "1.2.1"},
		{"<1.1.x", "1.1.500"},
		{"<1.1.x", "1.0.500"},
		{"<1.2.x", "1.1.1"},
		{">=1.1", "4.1.0"},
		{">=1.1", "4.1.0-beta"},
		{">=1.1", "1.1.0"},
		{">=1.1", "0.0.9"},
		{"<=1.1", "0.1.0"},
		{"<=1.1", "0.1.0-alpha"},
		{"<=1.1-a", "0.1.0-alpha"},
		{"<=1.1", "1.1.0"},
		{"<=1.x", "1.1.0"},
		{"<=2.x", "3.0.0"},
		{"<=1.1", "1.1.1"},
		{"<=1.1.1.1", "1.1.0"},
		{"<=1.1.1.1.x", "1.1.1.1"},
		{"<=1.1.1.1.x", "1.1.2.1"},
		{"<=1.1.x", "1.2.500"},
		{"<=4.5", "3.4.0"},
		{"<=4.5", "3.7.0"},
		{"<=4.5", "4.6.3"},
		{">1.1, <2", "1.1.1"},
		{">1.1, <2", "1.2.1"},
		{">1.1, <3", "4.3.2"},
		{">=1.1, <2, !=1.2.3", "1.2.3"},
		{">1.1 <2", "1.1.1"},
		{">1.1 <2", "1.2.1"},
		{">1.1    <3", "4.3.2"},
		{">=1.1    <2    !=1.2.3", "1.2.3"},
		{">=1.1, <2, !=1.2.3 || > 3", "4.1.2"},
		{">=1.1, <2, !=1.2.3 || > 3", "3.1.2"},
		{">=1.1, <2, !=1.2.3 || >= 3", "3.0.0"},
		{">=1.1, <2, !=1.2.3 || > 3", "3.0.0"},
		{">=1.1, <2, !=1.2.3 || > 3", "1.2.3"},
		{">=1.1 <2 !=1.2.3", "1.2.3"},
		{">=1.1 <2 !=1.2.3 || > 3", "4.1.2"},
		{">=1.1 <2 !=1.2.3 || > 3", "3.1.2"},
		{">=1.1 <2 !=1.2.3 || >= 3", "3.0.0"},
		{">=1.1 <2 !=1.2.3 || > 3", "3.0.0"},
		{">=1.1 <2 !=1.2.3 || > 3", "1.2.3"},
		{"> 1.1, <     2", "1.1.1"},
		{">   1.1, <2", "1.2.1"},
		{">1.1, <  3", "4.3.2"},
		{">= 1.1, <     2, !=1.2.3", "1.2.3"},
		{"> 1.1 < 2", "1.1.1"},
		{">1.1 < 2", "1.2.1"},
		{"> 1.1    <3", "4.3.2"},
		{">=1.1    < 2    != 1.2.3", "1.2.3"},
		{">= 1.1, <2, !=1.2.3 || > 3", "4.1.2"},
		{">= 1.1, <2, != 1.2.3 || > 3", "3.1.2"},
		{">= 1.1, <2, != 1.2.3 || >= 3", "3.0.0"},
		{">= 1.1, <2, !=1.2.3 || > 3", "3.0.0"},
		{">= 1.1, <2, !=1.2.3 || > 3", "1.2.3"},
		{">= 1.1 <2 != 1.2.3", "1.2.3"},
		{">= 1.1 <2 != 1.2.3 || > 3", "4.1.2"},
		{">= 1.1 <2 != 1.2.3 || > 3", "3.1.2"},
		{">= 1.1 <2 != 1.2.3 || >= 3", "3.0.0"},
		{">= 1.1 < 2 !=1.2.3 || > 3", "3.0.0"},
		{">=1.1 < 2 !=1.2.3 || > 3", "1.2.3"},
		{"1.1 - 2", "1.1.1"},
		{"1.5.0 - 4.5", "3.7.0"},
		{"1.1-3", "4.3.2"},
		{"^1.1", "1.1.1"},
		{"^1.1", "4.3.2"},
		{"^1.x", "1.1.1"},
		{"^2.x", "1.1.1"},
		{"^1.x", "2.1.1"},
		{"^1.x", "1.1.1-beta1"},
		{"^1.1.2-alpha", "1.2.1-beta1"},
		{"^1.2.x-alpha", "1.1.1-beta1"},
		{"^0.0.1", "0.0.1"},
		{"^0.0.1", "0.3.1"},
		{"~*", "2.1.1"},
		{"~1", "2.1.1"},
		{"~1", "1.3.5"},
		{"~1", "1.4"},
		{"~1.x", "2.1.1"},
		{"~1.x", "1.3.5"},
		{"~1.x", "1.4"},
		{"~1.1", "1.1.1"},
		{"~1.1", "1.1.1-alpha"},
		{"~1.1-alpha", "1.1.1-beta"},
		{"~1.1.1-beta", "1.1.1-alpha"},
		{"~1.1.1-beta", "1.1.1"},
		{"~1.2.3", "1.2.5"},
		{"~1.2.3", "1.2.2"},
		{"~1.2.3", "1.3.2"},
		{"~1.1", "1.2.3"},
		{"~1.3", "2.4.5"},
	}

	for _, tc := range tests {
		c, err := NewConstraint(tc.constraint)
		if err != nil {
			t.Errorf("err: %s", err)
			continue
		}

		v, err := NewVersion(tc.version)
		if err != nil {
			t.Errorf("err: %s", err)
			continue
		}

		r, err := c.AsRanges()
		if err != nil {
			t.Errorf("err: %s", err)
			continue
		}

		if EvalRanges(v, r) != c.Check(v) {
			t.Errorf("Constraint '%s' (%v) failing with '%s' expected %v", tc.constraint, r, tc.version, c.Check(v))
		}
	}
}
